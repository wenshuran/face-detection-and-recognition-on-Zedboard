-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fpga_top_preloadPixelsAndPrecalcCIoffse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_V_2 : IN STD_LOGIC_VECTOR (8 downto 0);
    x_V_3 : IN STD_LOGIC_VECTOR (8 downto 0);
    ci_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ch_out_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ci_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    ci_V_out_full_n : IN STD_LOGIC;
    ci_V_out_write : OUT STD_LOGIC;
    ch_out_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    ch_out_V_out_full_n : IN STD_LOGIC;
    ch_out_V_out_write : OUT STD_LOGIC;
    line_width : IN STD_LOGIC_VECTOR (15 downto 0);
    ImageCache_ch_in_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ImageCache_width_in_V : IN STD_LOGIC_VECTOR (8 downto 0);
    ImageCache_height_in_V : IN STD_LOGIC_VECTOR (8 downto 0);
    ImageCache_IBRAM_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ImageCache_IBRAM_ce0 : OUT STD_LOGIC;
    ImageCache_IBRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WeightsCache_ch_out_V : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fpga_top_preloadPixelsAndPrecalcCIoffse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_pp0_stg5_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_pp0_stg6_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp0_stg7_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_pp0_stg8_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg8_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_46 : BOOLEAN;
    signal x_V_3_read_reg_871 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_bdd_89 : BOOLEAN;
    signal line_width_load_reg_881 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_182_0_i_i_fu_263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_182_0_i_i_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_pixel_offset_V_0_i_i_fu_267_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_pixel_offset_V_0_i_i_reg_894 : STD_LOGIC_VECTOR (15 downto 0);
    signal slt_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt1_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt1_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_0_2_i_i_fu_329_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_V_0_2_i_i_reg_927 : STD_LOGIC_VECTOR (9 downto 0);
    signal ult1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult1_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_341_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_reg_937 : STD_LOGIC_VECTOR (1 downto 0);
    signal ult2_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult2_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_365_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_reg_953 : STD_LOGIC_VECTOR (1 downto 0);
    signal ult3_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult3_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_pixel_offset_V_0_1_i_i_fu_378_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_pixel_offset_V_0_1_i_i_reg_963 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_line_offset_V_0_i_i_reg_975 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal addr_pixel_offset_V_0_2_i_i_fu_394_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_pixel_offset_V_0_2_i_i_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_183_0_i_i_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_183_0_i_i_reg_992 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal tmp_184_0_i_i_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_0_i_i_reg_998 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_line_offset_V_0_1_i_i_reg_1009 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal rev1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_1_i_i_fu_497_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_1_i_i_reg_1041 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_2_i_i_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_2_i_i_reg_1048 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fpga_top_reg_float_s_fu_212_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_0_write_assign_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg5_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal rev2_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_758_i_i_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_758_i_i_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ci_times_ch_out_V_reg_1082 : STD_LOGIC_VECTOR (18 downto 0);
    signal buffer_1_write_assign_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg6_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal buffer_2_write_assign_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg7_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal rev4_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_V_1_2_i_i_fu_646_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_V_1_2_i_i_reg_1113 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_V_2_i_i_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_V_2_i_i_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal rev5_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_780_i_i_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_780_i_i_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_V_2_1_i_i_fu_669_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_V_2_1_i_i_reg_1134 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_V_2_2_i_i_fu_673_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_V_2_2_i_i_reg_1139 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_3_write_assign_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_774_i_i_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_774_i_i_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_785_i_i_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_785_i_i_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_790_i_i_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_790_i_i_reg_1164 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_4_write_assign_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_5_write_assign_reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_6_write_assign_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_7_write_assign_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal grp_fpga_top_reg_float_s_fu_212_in_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fpga_top_reg_float_s_fu_212_ap_ce : STD_LOGIC;
    signal px_0_i_i_fu_479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_0_1_i_i_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_0_2_i_i_fu_581_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_1_i_i_fu_628_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_1_1_i_i_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_1_2_i_i_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_2_i_i_fu_759_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_2_1_i_i_fu_785_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal px_2_2_i_i_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_198_0_i_i_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_0_1_i_i_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_0_2_i_i_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_1_i_i_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_1_1_i_i_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_1_2_i_i_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_2_i_i_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_2_1_i_i_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_2_2_i_i_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_2_cast1_fu_217_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_i_i_fu_221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_227_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_V_3_cast_fu_245_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_V_0_i_i_fu_249_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal addr_pixel_offset_V_0_i_i_fu_267_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal addr_pixel_offset_V_0_i_i_fu_267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_187_0_cast_i_i_cast_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_192_0_cast_i_i_cast_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_lobit_i_i2_0_i_i_fu_301_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_i_i_43_fu_359_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal addr_pixel_offset_V_0_1_i_i_fu_378_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_pixel_offset_V_0_1_i_i_fu_378_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal addr_pixel_offset_V_0_2_i_i_fu_394_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal addr_pixel_offset_V_0_2_i_i_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal addr_V_0_i_i_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_748_i_i_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_749_i_i_fu_465_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_0_i_i_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_V_0_1_i_i_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_753_i_i_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_754_i_i_fu_521_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_0_1_i_i_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_V_0_2_i_i_fu_544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_759_i_i_fu_568_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_0_2_i_i_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_V_1_i_i_fu_590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_764_i_i_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_765_i_i_fu_614_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_1_i_i_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_V_1_1_i_i_fu_637_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_769_i_i_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_770_i_i_fu_681_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_1_1_i_i_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_775_i_i_fu_720_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_1_2_i_i_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_781_i_i_fu_746_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_2_i_i_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_786_i_i_fu_772_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_2_1_i_i_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_791_i_i_fu_798_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal is_padding_pixel_2_2_i_i_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_239_ce : STD_LOGIC;
    signal grp_fu_386_ce : STD_LOGIC;
    signal grp_fu_402_ce : STD_LOGIC;
    signal grp_fu_438_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal addr_pixel_offset_V_0_1_i_i_fu_378_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_pixel_offset_V_0_2_i_i_fu_394_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal addr_pixel_offset_V_0_i_i_fu_267_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_239_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_386_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_402_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_438_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_438_p10 : STD_LOGIC_VECTOR (18 downto 0);

    component fpga_top_reg_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component fpga_top_mul_16s_2ns_16_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpga_top_mul_10ns_10ns_19_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    grp_fpga_top_reg_float_s_fu_212 : component fpga_top_reg_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r => grp_fpga_top_reg_float_s_fu_212_in_r,
        ap_return => grp_fpga_top_reg_float_s_fu_212_ap_return,
        ap_ce => grp_fpga_top_reg_float_s_fu_212_ap_ce);

    fpga_top_mul_16s_2ns_16_3_U2 : component fpga_top_mul_16s_2ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_width,
        din1 => grp_fu_239_p1,
        ce => grp_fu_239_ce,
        dout => grp_fu_239_p2);

    fpga_top_mul_16s_2ns_16_3_U3 : component fpga_top_mul_16s_2ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_width_load_reg_881,
        din1 => grp_fu_386_p1,
        ce => grp_fu_386_ce,
        dout => grp_fu_386_p2);

    fpga_top_mul_16s_2ns_16_3_U4 : component fpga_top_mul_16s_2ns_16_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_width_load_reg_881,
        din1 => grp_fu_402_p1,
        ce => grp_fu_402_ce,
        dout => grp_fu_402_p2);

    fpga_top_mul_10ns_10ns_19_3_U5 : component fpga_top_mul_10ns_10ns_19_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_438_p0,
        din1 => grp_fu_438_p1,
        ce => grp_fu_438_ce,
        dout => grp_fu_438_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89)))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_0_preg assign process. --
    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv19_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_0_preg <= ci_times_ch_out_V_reg_1082;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_1_preg assign process. --
    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_1_preg <= buffer_0_write_assign_reg_1055;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_2_preg assign process. --
    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_2_preg <= buffer_1_write_assign_reg_1087;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_3_preg assign process. --
    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_3_preg <= buffer_2_write_assign_reg_1097;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_4_preg assign process. --
    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_4_preg <= buffer_3_write_assign_reg_1144;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_5_preg assign process. --
    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_5_preg <= buffer_4_write_assign_reg_1169;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_6_preg assign process. --
    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_6_preg <= buffer_5_write_assign_reg_1179;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_7_preg assign process. --
    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_7_preg <= buffer_6_write_assign_reg_1189;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_8_preg assign process. --
    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_8_preg <= buffer_7_write_assign_reg_1199;
                end if; 
            end if;
        end if;
    end process;


    -- ap_return_9_preg assign process. --
    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
                    ap_return_9_preg <= grp_fpga_top_reg_float_s_fu_212_ap_return;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) then
                addr_V_1_2_i_i_reg_1113 <= addr_V_1_2_i_i_fu_646_p2;
                addr_V_2_1_i_i_reg_1134 <= addr_V_2_1_i_i_fu_669_p2;
                addr_V_2_2_i_i_reg_1139 <= addr_V_2_2_i_i_fu_673_p2;
                addr_V_2_i_i_reg_1118 <= addr_V_2_i_i_fu_650_p2;
                rev4_reg_1102 <= rev4_fu_599_p2;
                rev5_reg_1123 <= rev5_fu_654_p2;
                tmp_780_i_i_reg_1129 <= tmp_780_i_i_fu_664_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162)))) then
                addr_line_offset_V_0_1_i_i_reg_1009 <= grp_fu_386_p2;
                    tmp_183_0_i_i_reg_992(9 downto 0) <= tmp_183_0_i_i_fu_407_p1(9 downto 0);
                tmp_184_0_i_i_reg_998 <= tmp_184_0_i_i_fu_411_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then
                addr_line_offset_V_0_i_i_reg_975 <= grp_fu_239_p2;
                addr_pixel_offset_V_0_2_i_i_reg_980 <= addr_pixel_offset_V_0_2_i_i_fu_394_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then
                addr_pixel_offset_V_0_1_i_i_reg_963 <= addr_pixel_offset_V_0_1_i_i_fu_378_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89)))) then
                addr_pixel_offset_V_0_i_i_reg_894 <= addr_pixel_offset_V_0_i_i_fu_267_p2;
                line_width_load_reg_881 <= line_width;
                slt1_reg_906 <= slt1_fu_295_p2;
                slt_reg_901 <= slt_fu_281_p2;
                    tmp_182_0_i_i_reg_888(9 downto 0) <= tmp_182_0_i_i_fu_263_p1(9 downto 0);
                tmp_2_reg_911 <= p_lobit_i_i2_0_i_i_fu_301_p2(9 downto 9);
                tmp_3_reg_921 <= y_V_i_i_fu_221_p2(9 downto 9);
                tmp_6_reg_937 <= tmp_6_fu_341_p1;
                tmp_7_reg_947 <= x_V_0_i_i_fu_249_p2(9 downto 9);
                tmp_9_reg_953 <= tmp_9_fu_365_p1;
                ult1_reg_932 <= ult1_fu_335_p2;
                ult2_reg_942 <= ult2_fu_345_p2;
                ult3_reg_958 <= ult3_fu_369_p2;
                ult_reg_916 <= ult_fu_315_p2;
                x_V_0_2_i_i_reg_927 <= x_V_0_2_i_i_fu_329_p2;
                x_V_3_read_reg_871 <= x_V_3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and not((ap_done_reg = ap_const_logic_1)))) then
                buffer_0_write_assign_reg_1055 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6))) then
                buffer_1_write_assign_reg_1087 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7))) then
                buffer_2_write_assign_reg_1097 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                buffer_3_write_assign_reg_1144 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89)))) then
                buffer_4_write_assign_reg_1169 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                buffer_5_write_assign_reg_1179 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                buffer_6_write_assign_reg_1189 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162)))) then
                buffer_7_write_assign_reg_1199 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and not((ap_done_reg = ap_const_logic_1)))) then
                ci_times_ch_out_V_reg_1082 <= grp_fu_438_p2;
                rev2_reg_1060 <= rev2_fu_506_p2;
                rev3_reg_1066 <= rev3_fu_548_p2;
                tmp_758_i_i_reg_1072 <= tmp_758_i_i_fu_558_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then
                rev1_reg_1030 <= rev1_fu_449_p2;
                rev_reg_1024 <= rev_fu_444_p2;
                tmp_184_1_i_i_reg_1041 <= tmp_184_1_i_i_fu_497_p2;
                tmp_184_2_i_i_reg_1048 <= tmp_184_2_i_i_fu_501_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) then
                tmp_774_i_i_reg_1149 <= tmp_774_i_i_fu_704_p2;
                tmp_785_i_i_reg_1159 <= tmp_785_i_i_fu_712_p2;
                tmp_790_i_i_reg_1164 <= tmp_790_i_i_fu_716_p2;
            end if;
        end if;
    end process;
    tmp_182_0_i_i_reg_888(15 downto 10) <= "000000";
    tmp_183_0_i_i_reg_992(15 downto 10) <= "000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_bdd_89, ap_sig_bdd_162, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89)) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162))) then
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                end if;
            when ap_ST_pp0_stg4_fsm_4 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg5_fsm_5 => 
                if (not((ap_done_reg = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
                end if;
            when ap_ST_pp0_stg6_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_7;
            when ap_ST_pp0_stg7_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_8;
            when ap_ST_pp0_stg8_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    -- ImageCache_IBRAM_address0 assign process. --
    ImageCache_IBRAM_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, tmp_198_0_i_i_fu_421_p1, tmp_198_0_1_i_i_fu_492_p1, tmp_198_0_2_i_i_fu_563_p1, tmp_198_1_i_i_fu_594_p1, tmp_198_1_1_i_i_fu_641_p1, tmp_198_1_2_i_i_fu_708_p1, tmp_198_2_i_i_fu_742_p1, tmp_198_2_1_i_i_fu_768_p1, tmp_198_2_2_i_i_fu_794_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            ImageCache_IBRAM_address0 <= tmp_198_2_2_i_i_fu_794_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            ImageCache_IBRAM_address0 <= tmp_198_2_1_i_i_fu_768_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            ImageCache_IBRAM_address0 <= tmp_198_2_i_i_fu_742_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            ImageCache_IBRAM_address0 <= tmp_198_1_2_i_i_fu_708_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7))) then 
            ImageCache_IBRAM_address0 <= tmp_198_1_1_i_i_fu_641_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6))) then 
            ImageCache_IBRAM_address0 <= tmp_198_1_i_i_fu_594_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5))) then 
            ImageCache_IBRAM_address0 <= tmp_198_0_2_i_i_fu_563_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ImageCache_IBRAM_address0 <= tmp_198_0_1_i_i_fu_492_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            ImageCache_IBRAM_address0 <= tmp_198_0_i_i_fu_421_p1(15 - 1 downto 0);
        else 
            ImageCache_IBRAM_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- ImageCache_IBRAM_ce0 assign process. --
    ImageCache_IBRAM_ce0_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_bdd_89, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and not((ap_done_reg = ap_const_logic_1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162))))) then 
            ImageCache_IBRAM_ce0 <= ap_const_logic_1;
        else 
            ImageCache_IBRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addr_V_0_1_i_i_fu_488_p2 <= std_logic_vector(unsigned(addr_pixel_offset_V_0_1_i_i_reg_963) + unsigned(tmp_184_0_i_i_reg_998));
    addr_V_0_2_i_i_fu_544_p2 <= std_logic_vector(unsigned(addr_pixel_offset_V_0_2_i_i_reg_980) + unsigned(tmp_184_0_i_i_reg_998));
    addr_V_0_i_i_fu_416_p2 <= std_logic_vector(unsigned(tmp_184_0_i_i_fu_411_p2) + unsigned(addr_pixel_offset_V_0_i_i_reg_894));
    addr_V_1_1_i_i_fu_637_p2 <= std_logic_vector(unsigned(tmp_184_1_i_i_reg_1041) + unsigned(addr_pixel_offset_V_0_1_i_i_reg_963));
    addr_V_1_2_i_i_fu_646_p2 <= std_logic_vector(unsigned(tmp_184_1_i_i_reg_1041) + unsigned(addr_pixel_offset_V_0_2_i_i_reg_980));
    addr_V_1_i_i_fu_590_p2 <= std_logic_vector(unsigned(tmp_184_1_i_i_reg_1041) + unsigned(addr_pixel_offset_V_0_i_i_reg_894));
    addr_V_2_1_i_i_fu_669_p2 <= std_logic_vector(unsigned(tmp_184_2_i_i_reg_1048) + unsigned(addr_pixel_offset_V_0_1_i_i_reg_963));
    addr_V_2_2_i_i_fu_673_p2 <= std_logic_vector(unsigned(tmp_184_2_i_i_reg_1048) + unsigned(addr_pixel_offset_V_0_2_i_i_reg_980));
    addr_V_2_i_i_fu_650_p2 <= std_logic_vector(unsigned(tmp_184_2_i_i_reg_1048) + unsigned(addr_pixel_offset_V_0_i_i_reg_894));
    addr_pixel_offset_V_0_1_i_i_fu_378_p0 <= addr_pixel_offset_V_0_1_i_i_fu_378_p00(9 - 1 downto 0);
    addr_pixel_offset_V_0_1_i_i_fu_378_p00 <= std_logic_vector(resize(unsigned(x_V_3_read_reg_871),16));
    addr_pixel_offset_V_0_1_i_i_fu_378_p1 <= tmp_182_0_i_i_reg_888(10 - 1 downto 0);
    addr_pixel_offset_V_0_1_i_i_fu_378_p2 <= std_logic_vector(resize(unsigned(addr_pixel_offset_V_0_1_i_i_fu_378_p0) * unsigned(addr_pixel_offset_V_0_1_i_i_fu_378_p1), 16));
    addr_pixel_offset_V_0_2_i_i_fu_394_p0 <= addr_pixel_offset_V_0_2_i_i_fu_394_p00(10 - 1 downto 0);
    addr_pixel_offset_V_0_2_i_i_fu_394_p00 <= std_logic_vector(resize(unsigned(x_V_0_2_i_i_reg_927),16));
    addr_pixel_offset_V_0_2_i_i_fu_394_p1 <= tmp_182_0_i_i_reg_888(10 - 1 downto 0);
    addr_pixel_offset_V_0_2_i_i_fu_394_p2 <= std_logic_vector(resize(unsigned(addr_pixel_offset_V_0_2_i_i_fu_394_p0) * unsigned(addr_pixel_offset_V_0_2_i_i_fu_394_p1), 16));
    addr_pixel_offset_V_0_i_i_fu_267_p0 <= x_V_0_i_i_fu_249_p2;
    addr_pixel_offset_V_0_i_i_fu_267_p1 <= addr_pixel_offset_V_0_i_i_fu_267_p10(10 - 1 downto 0);
    addr_pixel_offset_V_0_i_i_fu_267_p10 <= std_logic_vector(resize(unsigned(ImageCache_ch_in_V),16));
    addr_pixel_offset_V_0_i_i_fu_267_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(addr_pixel_offset_V_0_i_i_fu_267_p0) * signed('0' &addr_pixel_offset_V_0_i_i_fu_267_p1))), 16));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg8_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;


    -- ap_return_0 assign process. --
    ap_return_0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, ci_times_ch_out_V_reg_1082, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_0 <= ci_times_ch_out_V_reg_1082;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    -- ap_return_1 assign process. --
    ap_return_1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_0_write_assign_reg_1055, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_1 <= buffer_0_write_assign_reg_1055;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    -- ap_return_2 assign process. --
    ap_return_2_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_1_write_assign_reg_1087, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_2 <= buffer_1_write_assign_reg_1087;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    -- ap_return_3 assign process. --
    ap_return_3_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_2_write_assign_reg_1097, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_3 <= buffer_2_write_assign_reg_1097;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    -- ap_return_4 assign process. --
    ap_return_4_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_3_write_assign_reg_1144, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_4 <= buffer_3_write_assign_reg_1144;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    -- ap_return_5 assign process. --
    ap_return_5_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_4_write_assign_reg_1169, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_5 <= buffer_4_write_assign_reg_1169;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    -- ap_return_6 assign process. --
    ap_return_6_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_5_write_assign_reg_1179, ap_return_6_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_6 <= buffer_5_write_assign_reg_1179;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    -- ap_return_7 assign process. --
    ap_return_7_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_6_write_assign_reg_1189, ap_return_7_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_7 <= buffer_6_write_assign_reg_1189;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    -- ap_return_8 assign process. --
    ap_return_8_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, buffer_7_write_assign_reg_1199, ap_return_8_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_8 <= buffer_7_write_assign_reg_1199;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    -- ap_return_9 assign process. --
    ap_return_9_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_4, grp_fpga_top_reg_float_s_fu_212_ap_return, ap_return_9_preg)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            ap_return_9 <= grp_fpga_top_reg_float_s_fu_212_ap_return;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ci_V_out_full_n, ch_out_V_out_full_n)
    begin
                ap_sig_bdd_162 <= ((ci_V_out_full_n = ap_const_logic_0) or (ch_out_V_out_full_n = ap_const_logic_0));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_46 assign process. --
    ap_sig_bdd_46_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_46 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_89 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_5_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_6_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_7_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg8_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg8_fsm_8_assign_proc : process(ap_sig_bdd_46)
    begin
        if (ap_sig_bdd_46) then 
            ap_sig_cseq_ST_pp0_stg8_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg8_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ch_out_V_out_din <= ch_out_V;

    -- ch_out_V_out_write assign process. --
    ch_out_V_out_write_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162)))) then 
            ch_out_V_out_write <= ap_const_logic_1;
        else 
            ch_out_V_out_write <= ap_const_logic_0;
        end if; 
    end process;

    ci_V_out_din <= ci_V;

    -- ci_V_out_write assign process. --
    ci_V_out_write_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162)))) then 
            ci_V_out_write <= ap_const_logic_1;
        else 
            ci_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fpga_top_reg_float_s_fu_212_ap_ce assign process. --
    grp_fpga_top_reg_float_s_fu_212_ap_ce_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_bdd_89, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162, ap_sig_cseq_ST_pp0_stg5_fsm_5)
    begin
        if ((((ap_done_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and ap_sig_bdd_162))) then 
            grp_fpga_top_reg_float_s_fu_212_ap_ce <= ap_const_logic_0;
        else 
            grp_fpga_top_reg_float_s_fu_212_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fpga_top_reg_float_s_fu_212_in_r assign process. --
    grp_fpga_top_reg_float_s_fu_212_in_r_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, px_0_i_i_fu_479_p3, px_0_1_i_i_fu_535_p3, px_0_2_i_i_fu_581_p3, px_1_i_i_fu_628_p3, px_1_1_i_i_fu_695_p3, px_1_2_i_i_fu_733_p3, px_2_i_i_fu_759_p3, px_2_1_i_i_fu_785_p3, px_2_2_i_i_fu_811_p3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_2_2_i_i_fu_811_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_2_1_i_i_fu_785_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_2_i_i_fu_759_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_1_2_i_i_fu_733_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_1_1_i_i_fu_695_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_1_i_i_fu_628_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_0_2_i_i_fu_581_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_0_1_i_i_fu_535_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            grp_fpga_top_reg_float_s_fu_212_in_r <= px_0_i_i_fu_479_p3;
        else 
            grp_fpga_top_reg_float_s_fu_212_in_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_239_ce assign process. --
    grp_fu_239_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_bdd_89, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_89))) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            grp_fu_239_ce <= ap_const_logic_1;
        else 
            grp_fu_239_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_239_p1 <= grp_fu_239_p10(2 - 1 downto 0);
    grp_fu_239_p10 <= std_logic_vector(resize(unsigned(tmp_1_fu_227_p1),16));

    -- grp_fu_386_ce assign process. --
    grp_fu_386_ce_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162))))) then 
            grp_fu_386_ce <= ap_const_logic_1;
        else 
            grp_fu_386_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_386_p1 <= grp_fu_386_p10(2 - 1 downto 0);
    grp_fu_386_p10 <= std_logic_vector(resize(unsigned(tmp_6_reg_937),16));

    -- grp_fu_402_ce assign process. --
    grp_fu_402_ce_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162, ap_sig_cseq_ST_pp0_stg4_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162))) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            grp_fu_402_ce <= ap_const_logic_1;
        else 
            grp_fu_402_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_402_p1 <= grp_fu_402_p10(2 - 1 downto 0);
    grp_fu_402_p10 <= std_logic_vector(resize(unsigned(tmp_9_reg_953),16));

    -- grp_fu_438_ce assign process. --
    grp_fu_438_ce_assign_proc : process(ap_done_reg, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_bdd_162, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_162))) or (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5) and not((ap_done_reg = ap_const_logic_1))))) then 
            grp_fu_438_ce <= ap_const_logic_1;
        else 
            grp_fu_438_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_438_p0 <= grp_fu_438_p00(10 - 1 downto 0);
    grp_fu_438_p00 <= std_logic_vector(resize(unsigned(WeightsCache_ch_out_V),19));
    grp_fu_438_p1 <= grp_fu_438_p10(10 - 1 downto 0);
    grp_fu_438_p10 <= std_logic_vector(resize(unsigned(ci_V),19));
    is_padding_pixel_0_1_i_i_fu_529_p2 <= "1" when (tmp_754_i_i_fu_521_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_0_2_i_i_fu_575_p2 <= "1" when (tmp_759_i_i_fu_568_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_0_i_i_fu_473_p2 <= "1" when (tmp_749_i_i_fu_465_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_1_1_i_i_fu_689_p2 <= "1" when (tmp_770_i_i_fu_681_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_1_2_i_i_fu_727_p2 <= "1" when (tmp_775_i_i_fu_720_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_1_i_i_fu_622_p2 <= "1" when (tmp_765_i_i_fu_614_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_2_1_i_i_fu_779_p2 <= "1" when (tmp_786_i_i_fu_772_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_2_2_i_i_fu_805_p2 <= "1" when (tmp_791_i_i_fu_798_p3 = ap_const_lv11_0) else "0";
    is_padding_pixel_2_i_i_fu_753_p2 <= "1" when (tmp_781_i_i_fu_746_p3 = ap_const_lv11_0) else "0";
    p_lobit_i_i2_0_i_i_fu_301_p2 <= (x_V_0_i_i_fu_249_p2 or y_V_i_i_fu_221_p2);
    px_0_1_i_i_fu_535_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_0_1_i_i_fu_529_p2(0) = '1') else 
        ap_const_lv32_0;
    px_0_2_i_i_fu_581_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_0_2_i_i_fu_575_p2(0) = '1') else 
        ap_const_lv32_0;
    px_0_i_i_fu_479_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_0_i_i_fu_473_p2(0) = '1') else 
        ap_const_lv32_0;
    px_1_1_i_i_fu_695_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_1_1_i_i_fu_689_p2(0) = '1') else 
        ap_const_lv32_0;
    px_1_2_i_i_fu_733_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_1_2_i_i_fu_727_p2(0) = '1') else 
        ap_const_lv32_0;
    px_1_i_i_fu_628_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_1_i_i_fu_622_p2(0) = '1') else 
        ap_const_lv32_0;
    px_2_1_i_i_fu_785_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_2_1_i_i_fu_779_p2(0) = '1') else 
        ap_const_lv32_0;
    px_2_2_i_i_fu_811_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_2_2_i_i_fu_805_p2(0) = '1') else 
        ap_const_lv32_0;
    px_2_i_i_fu_759_p3 <= 
        ImageCache_IBRAM_q0 when (is_padding_pixel_2_i_i_fu_753_p2(0) = '1') else 
        ap_const_lv32_0;
    rev1_fu_449_p2 <= (slt1_reg_906 xor ap_const_lv1_1);
    rev2_fu_506_p2 <= (ult_reg_916 xor ap_const_lv1_1);
    rev3_fu_548_p2 <= (ult1_reg_932 xor ap_const_lv1_1);
    rev4_fu_599_p2 <= (ult2_reg_942 xor ap_const_lv1_1);
    rev5_fu_654_p2 <= (ult3_reg_958 xor ap_const_lv1_1);
    rev_fu_444_p2 <= (slt_reg_901 xor ap_const_lv1_1);
    slt1_fu_295_p2 <= "1" when (signed(y_V_i_i_fu_221_p2) < signed(tmp_192_0_cast_i_i_cast_fu_291_p1)) else "0";
    slt_fu_281_p2 <= "1" when (signed(x_V_0_i_i_fu_249_p2) < signed(tmp_187_0_cast_i_i_cast_fu_277_p1)) else "0";
    tmp10_fu_659_p2 <= (rev_reg_1024 or rev5_fu_654_p2);
    tmp4_fu_511_p2 <= (rev2_fu_506_p2 or rev1_reg_1030);
    tmp5_fu_553_p2 <= (rev3_fu_548_p2 or rev1_reg_1030);
    tmp8_fu_604_p2 <= (rev_reg_1024 or rev4_fu_599_p2);
    tmp_182_0_i_i_fu_263_p1 <= std_logic_vector(resize(unsigned(ImageCache_ch_in_V),16));
    tmp_183_0_i_i_fu_407_p1 <= std_logic_vector(resize(unsigned(ci_V),16));
    tmp_184_0_i_i_fu_411_p2 <= std_logic_vector(unsigned(addr_line_offset_V_0_i_i_reg_975) + unsigned(tmp_183_0_i_i_fu_407_p1));
    tmp_184_1_i_i_fu_497_p2 <= std_logic_vector(unsigned(addr_line_offset_V_0_1_i_i_reg_1009) + unsigned(tmp_183_0_i_i_reg_992));
    tmp_184_2_i_i_fu_501_p2 <= std_logic_vector(unsigned(grp_fu_402_p2) + unsigned(tmp_183_0_i_i_reg_992));
    tmp_187_0_cast_i_i_cast_fu_277_p1 <= std_logic_vector(resize(unsigned(ImageCache_width_in_V),10));
    tmp_192_0_cast_i_i_cast_fu_291_p1 <= std_logic_vector(resize(unsigned(ImageCache_height_in_V),10));
    tmp_198_0_1_i_i_fu_492_p1 <= std_logic_vector(resize(unsigned(addr_V_0_1_i_i_fu_488_p2),64));
    tmp_198_0_2_i_i_fu_563_p1 <= std_logic_vector(resize(unsigned(addr_V_0_2_i_i_fu_544_p2),64));
    tmp_198_0_i_i_fu_421_p1 <= std_logic_vector(resize(unsigned(addr_V_0_i_i_fu_416_p2),64));
    tmp_198_1_1_i_i_fu_641_p1 <= std_logic_vector(resize(unsigned(addr_V_1_1_i_i_fu_637_p2),64));
    tmp_198_1_2_i_i_fu_708_p1 <= std_logic_vector(resize(unsigned(addr_V_1_2_i_i_reg_1113),64));
    tmp_198_1_i_i_fu_594_p1 <= std_logic_vector(resize(unsigned(addr_V_1_i_i_fu_590_p2),64));
    tmp_198_2_1_i_i_fu_768_p1 <= std_logic_vector(resize(unsigned(addr_V_2_1_i_i_reg_1134),64));
    tmp_198_2_2_i_i_fu_794_p1 <= std_logic_vector(resize(unsigned(addr_V_2_2_i_i_reg_1139),64));
    tmp_198_2_i_i_fu_742_p1 <= std_logic_vector(resize(unsigned(addr_V_2_i_i_reg_1118),64));
    tmp_1_fu_227_p1 <= y_V_i_i_fu_221_p2(2 - 1 downto 0);
    tmp_6_fu_341_p1 <= y_V_2(2 - 1 downto 0);
    tmp_748_i_i_fu_460_p2 <= (tmp_fu_454_p2 or tmp_2_reg_911);
    tmp_749_i_i_fu_465_p3 <= (ap_const_lv10_0 & tmp_748_i_i_fu_460_p2);
    tmp_753_i_i_fu_516_p2 <= (tmp4_fu_511_p2 or tmp_3_reg_921);
    tmp_754_i_i_fu_521_p3 <= (ap_const_lv10_0 & tmp_753_i_i_fu_516_p2);
    tmp_758_i_i_fu_558_p2 <= (tmp5_fu_553_p2 or tmp_3_reg_921);
    tmp_759_i_i_fu_568_p3 <= (ap_const_lv10_0 & tmp_758_i_i_reg_1072);
    tmp_764_i_i_fu_609_p2 <= (tmp8_fu_604_p2 or tmp_7_reg_947);
    tmp_765_i_i_fu_614_p3 <= (ap_const_lv10_0 & tmp_764_i_i_fu_609_p2);
    tmp_769_i_i_fu_677_p2 <= (rev2_reg_1060 or rev4_reg_1102);
    tmp_770_i_i_fu_681_p3 <= (ap_const_lv10_0 & tmp_769_i_i_fu_677_p2);
    tmp_774_i_i_fu_704_p2 <= (rev3_reg_1066 or rev4_reg_1102);
    tmp_775_i_i_fu_720_p3 <= (ap_const_lv10_0 & tmp_774_i_i_reg_1149);
    tmp_780_i_i_fu_664_p2 <= (tmp10_fu_659_p2 or tmp_7_reg_947);
    tmp_781_i_i_fu_746_p3 <= (ap_const_lv10_0 & tmp_780_i_i_reg_1129);
    tmp_785_i_i_fu_712_p2 <= (rev2_reg_1060 or rev5_reg_1123);
    tmp_786_i_i_fu_772_p3 <= (ap_const_lv10_0 & tmp_785_i_i_reg_1159);
    tmp_790_i_i_fu_716_p2 <= (rev3_reg_1066 or rev5_reg_1123);
    tmp_791_i_i_fu_798_p3 <= (ap_const_lv10_0 & tmp_790_i_i_reg_1164);
    tmp_9_fu_365_p1 <= y_V_i_i_43_fu_359_p2(2 - 1 downto 0);
    tmp_fu_454_p2 <= (rev_fu_444_p2 or rev1_fu_449_p2);
    ult1_fu_335_p2 <= "1" when (unsigned(x_V_0_2_i_i_fu_329_p2) < unsigned(tmp_187_0_cast_i_i_cast_fu_277_p1)) else "0";
    ult2_fu_345_p2 <= "1" when (unsigned(y_V_2) < unsigned(ImageCache_height_in_V)) else "0";
    ult3_fu_369_p2 <= "1" when (unsigned(y_V_i_i_43_fu_359_p2) < unsigned(tmp_192_0_cast_i_i_cast_fu_291_p1)) else "0";
    ult_fu_315_p2 <= "1" when (unsigned(x_V_3) < unsigned(ImageCache_width_in_V)) else "0";
    x_V_0_2_i_i_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(x_V_3_cast_fu_245_p1));
    x_V_0_i_i_fu_249_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(x_V_3_cast_fu_245_p1));
    x_V_3_cast_fu_245_p1 <= std_logic_vector(resize(unsigned(x_V_3),10));
    y_V_2_cast1_fu_217_p1 <= std_logic_vector(resize(unsigned(y_V_2),10));
    y_V_i_i_43_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(y_V_2_cast1_fu_217_p1));
    y_V_i_i_fu_221_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(y_V_2_cast1_fu_217_p1));
end behav;
